name: Jasapp CI/CD

on:
  push:
    paths:
      - '**/*.py'
      - 'Dockerfile'
      - '.dockerignore'
      - 'requirements.txt'
      - '.github/workflows/**'

jobs:
  flake8:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt

      - name: Run flake8
        run: flake8 --max-line-length=220 --extend-exclude=*.pyc,*__init__.py,./venv/*,./jasapp/rules/kubernetes/* ./

  pytest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt

      - name: Run pytest for Kubernetes syntax rules
        run: pytest jasapp/rules/kubernetes/syntax/*.py

      - name: Run pytest for Kubernetes security rules
        run: pytest jasapp/rules/kubernetes/security/*.py

      - name: Run pytest for Kubernetes performance rules
        run: pytest jasapp/rules/kubernetes/performance/*.py

      - name: Run pytest for Dockerfile syntax rules
        run: pytest jasapp/rules/dockerfile/syntax/*.py

      - name: Run pytest for Dockerfile security rules
        run: pytest jasapp/rules/dockerfile/security/*.py

      - name: Run pytest for Dockerfile performance rules
        run: pytest jasapp/rules/dockerfile/performance/*.py

      - name: Run pytest for Dockerfile parser arguments substitution
        run: pytest jasapp/parser/dockerfile.py

  docker-lint:
    needs: [flake8, pytest]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          # Optional: Ignore specific rules
          # ignore: DL3000,DL3001

  docker-build:
    needs: [docker-lint]
    runs-on: ubuntu-latest
    env:
      TEST_IMAGE: ${{ secrets.DOCKER_HUB_REGISTRY_USER }}/jasapp:${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.TEST_IMAGE }}

  docker-test:
    needs: [docker-build]
    runs-on: ubuntu-latest
    env:
      TEST_IMAGE: ${{ secrets.DOCKER_HUB_REGISTRY_USER }}/jasapp:${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull Docker image
        run: docker pull ${{ env.TEST_IMAGE }}

      - name: Run jasapp --version
        run: docker run --rm ${{ env.TEST_IMAGE }} --version

      - name: Run jasapp with score and exit-code for Dockerfile scan
        run: docker run --rm ${{ env.TEST_IMAGE }} --score --type dockerfile --exit-code jasapp/examples/dockerfile/example.good.Dockerfile

      - name: Run jasapp with score and exit-code for Dockerfile scan with a fix issue-03
        run: docker run --rm ${{ env.TEST_IMAGE }} --score --type dockerfile --exit-code jasapp/examples/dockerfile/fix-issue-3.good.Dockerfile

      - name: Run jasapp with score and exit-code for Kubernetes scan
        run: docker run --rm ${{ env.TEST_IMAGE }} --score --type kubernetes --exit-code jasapp/examples/kubernetes/good.kubernetes.yaml

  docker-release:
    needs: [docker-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run on push to main branch
    env:
      TEST_IMAGE: ${{ secrets.DOCKER_HUB_REGISTRY_USER }}/jasapp:${{ github.ref_name }}
      RELEASE_IMAGE: ${{ secrets.DOCKER_HUB_REGISTRY_USER }}/jasapp:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Pull test image
        run: docker pull ${{ env.TEST_IMAGE }}

      - name: Tag test image as release image
        run: docker tag ${{ env.TEST_IMAGE }} ${{ env.RELEASE_IMAGE }}

      - name: Push release image
        run: docker push ${{ env.RELEASE_IMAGE }}

  pypi-publish:
    needs: [docker-release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # S'ex√©cute uniquement sur la branche main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}